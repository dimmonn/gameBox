Index: src/main/java/com/local/boxes/algorythm/RewardFinder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.local.boxes.algorythm;\n\nimport com.local.boxes.model.Box;\nimport lombok.extern.log4j.Log4j;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\nimport static com.local.boxes.model.SIGNS.EXTRA_LIFE;\nimport static com.local.boxes.model.SIGNS.GAME_OVER;\n\n@Log4j\npublic class RewardFinder implements BoxGameRunnable {\n    private int result;\n    private boolean firstRoundState = true;\n\n    @Override\n    public void playGame(Stack<Box> shuffled, Stack<Box> secondChanceShuffled) {\n        log.info(\"SHOW TIME...\");\n        List<Box> boxes = new ArrayList<>(shuffled);\n        Box extraLifeBox = new Box().createBox(0, EXTRA_LIFE);\n        Box gameOverBox = new Box().createBox(0, GAME_OVER);\n        if (boxes.indexOf(extraLifeBox) > boxes.indexOf(gameOverBox)) {\n            int sum = shuffled.stream().mapToInt(Box::getReward).sum();\n            result += sum;\n            log.warn(\"round result is \" + sum);\n        } else {\n            List<Box> firstRound = boxes.subList(boxes.indexOf(gameOverBox), boxes.size());\n            int sum = firstRound.stream().mapToInt(Box::getReward).sum();\n            result += sum;\n            log.warn(\"round result is \" + sum);\n        }\n        if (!firstRoundState) {\n            return;\n        }\n        Box pop = secondChanceShuffled.pop();\n        firstRoundState = false;\n        if (pop.getSign() == EXTRA_LIFE) {\n            playGame(shuffled, secondChanceShuffled);\n        } else {\n            int reward = pop.getReward();\n            result += reward;\n            log.warn(\"round result is \" + reward);\n        }\n        log.warn(\"FINISHED THE GAME WITH RESULT OF: \" + result);\n    }\n\n    @Override\n    public int getResult() {\n        return result;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/local/boxes/algorythm/RewardFinder.java	(revision a92933d0fa9f79c204cdbebc57d594d9d0d66d4f)
+++ src/main/java/com/local/boxes/algorythm/RewardFinder.java	(date 1562509861000)
@@ -6,6 +6,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Stack;
+import java.util.stream.Stream;
 
 import static com.local.boxes.model.SIGNS.EXTRA_LIFE;
 import static com.local.boxes.model.SIGNS.GAME_OVER;
@@ -22,30 +23,32 @@
         Box extraLifeBox = new Box().createBox(0, EXTRA_LIFE);
         Box gameOverBox = new Box().createBox(0, GAME_OVER);
         if (boxes.indexOf(extraLifeBox) > boxes.indexOf(gameOverBox)) {
-            int sum = shuffled.stream().mapToInt(Box::getReward).sum();
-            result += sum;
-            log.warn("round result is " + sum);
+            countSumOfAwards(shuffled.stream());
         } else {
             List<Box> firstRound = boxes.subList(boxes.indexOf(gameOverBox), boxes.size());
-            int sum = firstRound.stream().mapToInt(Box::getReward).sum();
-            result += sum;
-            log.warn("round result is " + sum);
+            countSumOfAwards(firstRound.stream());
         }
         if (!firstRoundState) {
             return;
         }
-        Box pop = secondChanceShuffled.pop();
+        Box secondChanceBox = secondChanceShuffled.pop();
         firstRoundState = false;
-        if (pop.getSign() == EXTRA_LIFE) {
+        if (secondChanceBox.getSign() == EXTRA_LIFE) {
             playGame(shuffled, secondChanceShuffled);
         } else {
-            int reward = pop.getReward();
+            int reward = secondChanceBox.getReward();
             result += reward;
             log.warn("round result is " + reward);
         }
         log.warn("FINISHED THE GAME WITH RESULT OF: " + result);
     }
 
+    private void countSumOfAwards(Stream<Box> stream) {
+        int sum = stream.mapToInt(Box::getReward).sum();
+        result += sum;
+        log.warn("round result is " + sum);
+    }
+
     @Override
     public int getResult() {
         return result;
Index: src/main/java/com/local/boxes/factory/GameFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.local.boxes.factory;\n\nimport com.local.boxes.Game;\nimport com.local.boxes.model.Box;\nimport com.local.boxes.model.SIGNS;\nimport com.local.boxes.shuffle.Shuffleable;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport static com.local.boxes.model.SIGNS.GO_GO_GO;\n\n\npublic class GameFactory {\n    private final Game.GameBuilder gameBuilder = new Game.GameBuilder();\n\n    public Game getGameInstance(\n            Map<Integer, Integer> bonuses, List<SIGNS> signs,\n            Map<Integer, Integer> secondChanceAward, List<SIGNS> secondChanceSigns,\n            Shuffleable shuffleable,\n            boolean shuffleOnStart\n    ) {\n        fillInAwards(bonuses, true);\n        fillInSigns(signs, true);\n        fillInAwards(secondChanceAward, false);\n        fillInSigns(secondChanceSigns, false);\n        return gameBuilder.build(shuffleOnStart, shuffleable);\n    }\n\n    private void fillInSigns(List<SIGNS> signs, boolean isFirstChance) {\n        for (SIGNS sign : signs) {\n            if (isFirstChance) {\n                gameBuilder.addBox(new Box().createBox(0, sign));\n            } else {\n                gameBuilder.addSecondChance(new Box().createBox(0, sign));\n            }\n        }\n    }\n\n    private void fillInAwards(Map<Integer, Integer> bonuses, boolean isFirstChance) {\n        for (Integer bonus : bonuses.keySet()) {\n            for (int i = 0; i < bonuses.get(bonus); i++) {\n                if (isFirstChance) {\n                    gameBuilder.addBox(new Box().createBox(bonus, GO_GO_GO));\n                } else {\n                    gameBuilder.addSecondChance(new Box().createBox(bonus, GO_GO_GO));\n                }\n            }\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/local/boxes/factory/GameFactory.java	(revision a92933d0fa9f79c204cdbebc57d594d9d0d66d4f)
+++ src/main/java/com/local/boxes/factory/GameFactory.java	(date 1562509608000)
@@ -20,14 +20,14 @@
             Shuffleable shuffleable,
             boolean shuffleOnStart
     ) {
-        fillInAwards(bonuses, true);
-        fillInSigns(signs, true);
-        fillInAwards(secondChanceAward, false);
-        fillInSigns(secondChanceSigns, false);
+        fillInGameWithAwards(bonuses, true);
+        fillInGameWithSigns(signs, true);
+        fillInGameWithAwards(secondChanceAward, false);
+        fillInGameWithSigns(secondChanceSigns, false);
         return gameBuilder.build(shuffleOnStart, shuffleable);
     }
 
-    private void fillInSigns(List<SIGNS> signs, boolean isFirstChance) {
+    private void fillInGameWithSigns(List<SIGNS> signs, boolean isFirstChance) {
         for (SIGNS sign : signs) {
             if (isFirstChance) {
                 gameBuilder.addBox(new Box().createBox(0, sign));
@@ -37,7 +37,7 @@
         }
     }
 
-    private void fillInAwards(Map<Integer, Integer> bonuses, boolean isFirstChance) {
+    private void fillInGameWithAwards(Map<Integer, Integer> bonuses, boolean isFirstChance) {
         for (Integer bonus : bonuses.keySet()) {
             for (int i = 0; i < bonuses.get(bonus); i++) {
                 if (isFirstChance) {
